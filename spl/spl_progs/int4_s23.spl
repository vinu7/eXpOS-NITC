////INT_4
//create and delte file 

alias usersp R1;
usersp = SP;

alias pte R10;
pte = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1];

//switch to kernel stack
[pte + 13] = SP;
SP = [pte + 11]*512 - 1;

//find return address
alias retadd R2;
retadd = [PTBR + 2*(usersp - 1)/512]*512 + (usersp-1)%512;

//get the system call number
alias syscallno R3;
syscallno = [[PTBR + 2*(usersp - 5)/512]*512 + (usersp-5)%512];

[pte + 9] = syscallno;
	
alias filename R4;
filename = [[PTBR + 2*(usersp-4)/512]*512 + (usersp-4)%512];


if (syscallno == 1) then	//corres. to create file

	alias count R5;
	count =0;

	//check if file is already present
	while (count < MAX_FILE_NUM) do 
		if ([INODE_TABLE + 16*count + 1] == filename) then
			[retadd] = 0;
			[pte + 9] = 0;
			SP = [pte + 13];
			ireturn;	//return 0
		endif;
		count = count + 1;
	endwhile;

	//find a free inode index
	count = 0;
	while (count<MAX_FILE_NUM) do 
		if ([INODE_TABLE + 16*count + 1] == -1) then
			break;
		endif;
		count = count + 1;
	endwhile;

	//if no index is empty, return -1
	if (count == MAX_FILE_NUM) then
		[retadd] = -1;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;

	alias inodeindex R6;
	inodeindex = count;

	alias permission R7;
	permission = [[PTBR + 2*(usersp-3)/512]*512 + (usersp-3)%512];

	//set inode table entries
	alias i_index R8;
	i_index = INODE_TABLE + 16*inodeindex;

	[i_index + 0] = DATA;	//file type is data
	[i_index + 1] = filename;	//set file name
	[i_index + 2] = 0;	//set file size to 0
	[i_index + 3] = [pte + 3];	//set userid(copy from process table)
	[i_index + 4] = permission;	//set permission bit given as argument
	[i_index + 8] = -1;	//set block numbers to -1 (no block present in disk)
	[i_index + 9] = -1;
	[i_index + 10] = -1;
	[i_index + 11] = -1;		

	//set root table entries
	alias root_index R9;
	root_index = ROOT_FILE + 8*inodeindex;

	[root_index + 0] = filename;	//set filename
	[root_index + 1] = 0;	//set file size
	[root_index + 2] = DATA;	//filetype
	[root_index + 3] = [pte + 3];  //username
	[root_index + 4] = permission;	//permission

	//set file status table entries
	[FILE_STATUS_TABLE + 4*inodeindex + 0] = -1;	//set locking pid to -1
	[FILE_STATUS_TABLE + 4*inodeindex + 1] = -1;	//set open instances to -1


	[retadd] = 0;
	[pte + 9] = 0;
	SP = [pte + 13];
	ireturn;
endif;

if (syscallno == 4) then //corresponding to delete file
	[pte + 9] = 4;

	alias filename R4;
	filename = [[PTBR + 2*(usersp-4)/512]*512 + (usersp-4)%512];

	alias count R5;
	count =0;	

	//get inode index of file
	while (count < MAX_FILE_NUM) do 
		if ([INODE_TABLE + 16*count + 1] == filename) then
			break;
		endif;
		count = count + 1;
	endwhile;

	alias inodeindex R6;
	inodeindex = count;

	//if file does not exist, return 0
	if (inodeindex == MAX_FILE_NUM) then
		[retadd] = 0;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;

	//if file is not data file, return -1
	if ([INODE_TABLE + 16*inodeindex + 0] != DATA) then
		[retadd] = -1;
		[pte + 9] = 0;
		SP = [pte + 13];
		ireturn;
	endif;		

	//if file has exclusive permission
	if ([INODE_TABLE + 16*inodeindex + 4] == 0) then
		alias userid R7;
		userid = [pte + 3];
		if (userid!=1 && userid!=[INODE_TABLE + 16*inodeindex + 3]) then //if user is not root or file owner
			[retadd] = -1;
			[pte + 9] = 0;
			SP = [pte + 13];
			ireturn;
		endif;
	endif;

	//call acquire inode in resource manager module
	backup;
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeindex;
	
	call MOD_0;
	restore;

	//if the file is open, call release inode and retun -2
	if ([FILE_STATUS_TABLE + 4*inodeindex + 1] != -1) then
		backup;
		R1 = 5;//release inode
		R3 = inodeindex;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		restore;

		[retadd] = -2;
		[pte + 9] = 0;
		SP = [pte + 13];

		ireturn;
	endif;

	//for each disk block allocated to the file
	count = 0;
	while(count < 4) do 
		if ([INODE_TABLE + 16*inodeindex + 8 + count] != -1) then
			alias buffid R7;
			buffid = BUFFER_TABLE + 4*([INODE_TABLE + 16*inodeindex + 8 + count]%4);
			//if block is loaded in the buffer and dirty bit is set, reset it
			if ([buffid]==[INODE_TABLE + 16*inodeindex + 8+ count] && [buffid+1]==1) then
				[buffid+1]=0;
			endif;

			//call release block in mem manager module
			backup;
			R1 = 4;
			R2 = [INODE_TABLE + 16*inodeindex + 8 + count];
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_2;
			restore;

		endif;
		[INODE_TABLE + 16*inodeindex + 8 + count] = -1;
		count = count + 1;
	endwhile;


	[INODE_TABLE + 16*inodeindex + 1] = -1;	//invalidate the inode entry

	[ROOT_FILE + 8*inodeindex + 0] = -1;	//invalidate root entry

	//release lock by invoking release inode in resource managaer module
	backup;
	R1 = 5;
	R3 = inodeindex;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	restore;

	[retadd] = 0;
	[pte + 9] = 0;
	SP = [pte + 13];

	ireturn;
endif;
