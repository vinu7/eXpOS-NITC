//file manager module
//open(3),close(4)

alias funcno R1;
alias curpid R2;

if(funcno==2 || funcno==1) then	//buffered read
	//args are 3
	alias blocknum R3;
	alias offset R4;
	alias physicaladd R5;//word in case of bufferwrite
	
	alias bufnum R6;
	bufnum=(blocknum %4);
//print("hello");
//print (blocknum);

	//call acquire buffer
	backup;
	R1=1;
	R2=curpid;
	R3=bufnum;
	call MOD_0;
	restore;

	if([BUFFER_TABLE+4*bufnum+0]!=blocknum) then	//different diskBlock
		if([BUFFER_TABLE+4*bufnum+1]==1) then	//dirty bit is set
			//write back using disk store
			backup;
			R1=1;
			R2=curpid;
			R3=71+bufnum;	//71,72,73,74
			R4=[BUFFER_TABLE+4*bufnum];
			call MOD_4;
			restore;
			//print("dont");
			[BUFFER_TABLE+4*bufnum+1]=0;	//mark clean
		endif;

		//load req block using disk_load
		backup;
		R1=2;
		R2=curpid;
		R4=blocknum;	//note:(R3==blocknum) so avoid overwrite
		R3=71+bufnum;
		
		call MOD_4;
		restore;

		//update buffer table
		[BUFFER_TABLE+4*bufnum+0]=blocknum;
	endif;

	if(funcno==2) then	//read
		[physicaladd]=[(71+bufnum)*512+offset];
	else
		//bufferwrite
		[(71+bufnum)*512+offset]=physicaladd; //here word
		[BUFFER_TABLE+4*bufnum+1]=1;	//mark as dirty
	endif;
	
	//print("bye");
	
	//release buffer

	backup;
	R1=2;
	R2=curpid;
	R3=bufnum;
	call MOD_0;
	restore;

	return;
endif;



if(funcno==3) then //open
	//arg is filename
	alias filename R3;
	alias count R4;
	count=0;
	while (count < MAX_FILE_NUM) do 
		if ([INODE_TABLE + 16*count + 1] == filename) then
			break;
		endif;
		count = count + 1;
	endwhile;
	
	//file not exists
	if(count==60) then
		R0=-1;
		return;
	endif;
	
	alias inodeindex R5;
	inodeindex=count;

	//call acquire_inode()
	multipush(R1,R2,R3,R4,R5);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = count;//inode_index
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);
	
	if(R0==-1) then
		R0=-1;
		return;
	endif;
	
	if([INODE_TABLE+count*16+1]!=filename || [INODE_TABLE+count*16]==EXEC) then 	//release inode
		backup;	
		R1 = 5;
		R3 = count;//inode index
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		restore;
	
		R0=-1;
		return;
	endif;
	
	//find free entry in open file table
	count=0;
	while(count<32) do 	//MAX_OPENFILE_NUM=32;
		if([OPEN_FILE_TABLE+4*count+0]==-1) then
			break;
		endif;
		count=count+1;
	endwhile;

	if(count==32) then  //no entry
		//release inode
		backup;	
		R1 = 5;
		R3 = inodeindex;//inode index
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		restore;
	
		R0=-2;
		return;
	endif;
	
	alias openindex R6;
	openindex=count;

	if(filename=="root") then
		[OPEN_FILE_TABLE+4*openindex+0]=INODE_ROOT;
	else
		if([FILE_STATUS_TABLE+4*inodeindex+1]==-1) then		//file open count
			[FILE_STATUS_TABLE+4*inodeindex+1]=1;
		else
			[FILE_STATUS_TABLE+4*inodeindex+1]=[FILE_STATUS_TABLE+4*inodeindex+1]+1;	//inc file open count
		endif;
		
		[OPEN_FILE_TABLE+4*openindex+0]=inodeindex;		//set open table index
		
	endif;

	[OPEN_FILE_TABLE+openindex*4+1]=1;	//open insatnce count
	[OPEN_FILE_TABLE+openindex*4+2]=0;	//lseek
	
	//release inode
	backup;	
	R1 = 5;
	R3 = inodeindex;//inode index
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	restore;
	
	R0=openindex;
	return;
endif;

if(funcno==4) then	//close function
	//arg is open file table index
	alias openindex R3;
	alias inodeindex R4;
	inodeindex=[OPEN_FILE_TABLE+4*openindex+0];
	[OPEN_FILE_TABLE+openindex*4+1]=[OPEN_FILE_TABLE+openindex*4+1]-1;

	if([OPEN_FILE_TABLE+4*openindex+1]==0) then
		[OPEN_FILE_TABLE+4*openindex]=-1;
		[OPEN_FILE_TABLE+4*openindex+1]=-1;
		[OPEN_FILE_TABLE+4*openindex+2]=-1;
		//
		if([INODE_TABLE+16*inodeindex+1]!="root") then
			[FILE_STATUS_TABLE+4*inodeindex+1]=[FILE_STATUS_TABLE+4*inodeindex+1]-1;
		endif;			
		if([FILE_STATUS_TABLE+4*inodeindex+1]==0) then
			[FILE_STATUS_TABLE+4*inodeindex+1]=-1;
		endif;
	endif;
	return;
endif;
