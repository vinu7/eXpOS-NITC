//system call for open(2) and close(3) and seek(6) int_5
alias usersp R1;
usersp = SP;

alias pte R10;
pte = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1];

//switch to kernel stack
[pte + 13] = SP;
SP = [pte + 11]*512 - 1;

//find return address
alias retadd R2;
retadd = [PTBR + 2*(usersp - 1)/512]*512 + (usersp-1)%512;

//get the system call number
alias syscallno R3;
syscallno = [[PTBR + 2*(usersp - 5)/512]*512 + (usersp-5)%512];

[pte + 9] = syscallno;
	
alias filename R4;
filename = [[PTBR + 2*(usersp-4)/512]*512 + (usersp-4)%512];

if(syscallno==2) then 		//open
	alias counter R5;
	counter=496;
	while(counter<=511) do
		if([[pte+11]*512+counter]==-1) then
			break;
		endif;
		counter=counter+2;
	endwhile;
	if(counter>511) then //no space
		//return -1
		[retadd]=-3;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;	
	endif;
	//call open in mod_3(file manager module)
	
	multipush(R1,R2,R3,R4,R5,R10);
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=filename;
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R10);
	
	//if open fails
	if(R0==-1 || R0==-2) then
		[retadd]=R0;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;
	
	//set process table entry
	[[pte+11]*512+counter]=0;//resource identifier
	[[pte+11]*512+counter+1]=R0;	//open file table entry
	//[retadd]=R0;
	[pte+9]=0;
	[retadd]=(counter-496)/2;
	SP=[pte+13];
	ireturn;
endif;

if(syscallno==3) then		//close 
	alias filedes R5;
	filedes=filename;
	if( !(filedes>=0 && filedes<=7) ) then
		[retadd]=-1;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;
	if( [[pte+11]*512+(496+(filedes*2))]!=0) then	//not file
		[retadd]=-1;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;
	
	alias openindex R6;
	openindex=[[pte+11]*512+(496+(filedes*2)+1)];

	//call close
	backup;
	R1=4;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=openindex;
	call MOD_3;
	restore;

	//invalidate per process resource entry
	[[pte+11]*512+(496+(filedes*2))]=-1;
	
	[retadd]=0;
	[pte+9]=0;
	SP=[pte+13];
	ireturn;
endif;
	
if(syscallno==6) then	//seek
	//args are filedes and offset
	alias filedes R5;
	filedes=filename;

	alias offset R6;
	offset=[[PTBR + 2*(usersp-3)/512]*512 + (usersp-3)%512];
	
	if( !(filedes>=0 && filedes<=7) ) then
		[retadd]=-1;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;

	if( [[pte+11]*512+(496+(filedes*2))]!=0) then	//not file
		[retadd]=-1;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;

	alias openindex R7;
	alias inodeindex R8;
	openindex=[[pte+11]*512+(496+(filedes*2)+1)];
	inodeindex=[OPEN_FILE_TABLE+4*openindex+0];

	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 =inodeindex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	
	if(R0==-1) then
		[retadd]=-1;
		[pte+9]=0;
		SP=[pte+13];
		ireturn;
	endif;

	alias lseek R9;
	lseek=[OPEN_FILE_TABLE+4*openindex+2];
	alias filesize R11;

  //check validity
	//get filesize
	if([OPEN_FILE_TABLE+4*openindex+0]==INODE_ROOT) then
		filesize=480;
	else
		//not root
		filesize=[INODE_TABLE+16*inodeindex+2];
	endif;
	
	if(lseek+offset<0) then
		//release inode
			backup;	
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inodeindex;//inode index
			call MOD_0;
			restore;
		
			[retadd]=-2;
			[pte+9]=0;
			SP=[pte+13];
			ireturn;
	endif;
	
	if(offset==0) then
		[OPEN_FILE_TABLE+4*openindex+2]=0;
	else
		if((lseek+offset) >filesize) then
			[OPEN_FILE_TABLE+4*openindex+2]=filesize;
		else
			[OPEN_FILE_TABLE+4*openindex+2]=[OPEN_FILE_TABLE+4*openindex+2]+offset;
		endif;
	endif;

	//release inode
	backup;
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeindex;//inode index
	call MOD_0;
	restore;
	
	[retadd]=0;
	[pte+9]=0;
	SP=[pte+13];
	ireturn;
endif;

	

