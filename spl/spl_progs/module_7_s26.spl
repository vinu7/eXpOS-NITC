//library code
loadi(63,13);
loadi(64,14);

//timer interrupt
loadi(4,17);
loadi(5,18);

//disk interrupt
loadi(6,19);
loadi(7,20);

//console interrupt
loadi(8,21);
loadi(9,22);

//INT4
loadi(10,23);
loadi(11,24);

//INT_5
loadi(12,25);
loadi(13,26);

//INT6
loadi(14,27);
loadi(15,28);

//INT7
loadi(16,29);
loadi(17,30);

//INT8
loadi(18,31);
loadi(19,32);

//INT9
loadi(20,33);
loadi(21,34);

//INT10
loadi(22,35);
loadi(23,36);

//INT11
loadi(24,37);
loadi(25,38);

//INT12
loadi(26,39);
loadi(27,40);

//INT13
loadi(28,41);
loadi(29,42);

//INT14
loadi(30,43);
loadi(31,44);

//INT15
loadi(32,45);
loadi(33,46);

//INT16
loadi(34,47);
loadi(35,48);

//INT17
loadi(36,49);
loadi(37,50);

//disk free list
loadi(61,2);

//root file
loadi(62,5);


//init code
loadi(65,7);
//loadi(66,8);

//shell code
loadi(67,9);
loadi(68,10);

//exhandler
loadi(2,15);
loadi(3,16);

//MOD0
loadi(40,53);
loadi(41,54);

//MOD1
loadi(42,55);
loadi(43,56);

//MOD2
loadi(44,57);
loadi(45,58);

//MOD_3
loadi(46,59);
loadi(47,60);

//MOD4
loadi(48,61);
loadi(49,62);

//inode table
loadi(59,3);
loadi(60,4);

//process 2
//loadi(86,69);

//process 3
//loadi(91,70);

//page table entries for init process
PTBR = PAGE_TABLE_BASE + 20;
PTLR=10;
//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
//heap
[PTBR+4]=-1;//78;
[PTBR+5]="0000";
[PTBR+6]=-1;//79;
[PTBR+7]="0000";
//code
[PTBR+8]=65;
[PTBR+9]="0100";
//[PTBR+10]=-1;//66;
//[PTBR+11]="0000";
//[PTBR+12]=-1;
//[PTBR+13]="0000";
//[PTBR+14]=-1;
//[PTBR+15]="0000";
//stack
[PTBR+16]=66;//76
[PTBR+17]="0110";
//[PTBR+18]=-1;
//[PTBR+19]="0000";

//process table entries for init process
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 77;//80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

[66*512] = [65*512 + 1]; //entry point for init process


//shell process

//page table entries for shell process
PTBR = PAGE_TABLE_BASE + 2*20;
//PTLR=10;
//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";
//code
[PTBR+8]=67;
[PTBR+9]="0100";
[PTBR+10]=68;
[PTBR+11]="0100";
//[PTBR+12]=-1;
//[PTBR+13]="0000";
//[PTBR+14]=-1;
//[PTBR+15]="0000";
//stack
[PTBR+16]=78;
[PTBR+17]="0110";
[PTBR+18]=79;
[PTBR+19]="0110";

//process table entries for shell process
[PROCESS_TABLE + 2*16 + 1] = 2;//pid
[PROCESS_TABLE + 2*16 + 2] = 1;//ppid
[PROCESS_TABLE + 2*16 + 4] = TERMINATED;
[PROCESS_TABLE + 2*16 + 11] = 80;
[PROCESS_TABLE + 2*16 + 12] = 0;
[PROCESS_TABLE + 2*16 + 13] = 8*512;
[PROCESS_TABLE + 2*16 + 14] = PAGE_TABLE_BASE + 2*20;
[PROCESS_TABLE + 2*16 + 15] = 10;

[78*512] = [67*512 + 1]; //entry point for shell process







//per process resource table for shell
multipush(R0);
alias count R0;
count=496;
while(count<=511) do
	[80*512+count]=-1;
	count=count+2;
endwhile;
//multipop(R0);



//all other processes initially terminated
//multipush (R0);
//alias count R0;
count = 2;

while(count < 16) do
	[PROCESS_TABLE + count*16 + 4] = TERMINATED;
	count = count + 1;
endwhile;
//multipop (R0);

[TERMINAL_STATUS_TABLE] = 0;  //setting terminal as free initially
[DISK_STATUS_TABLE] = 0;	//set disk as free

//multipush (R0);
count = 0;
while (count < 128) do 	//initialize mem free list
	if (count < 81) then
		[MEMORY_FREE_LIST + count] = 1;
	else
		[MEMORY_FREE_LIST + count] = 0;
	endif;
	count = count + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 47;//45	//initial mem_free_count = 47
[SYSTEM_STATUS_TABLE + 3] = 0;	//initial mem_wait_count = 0
//multipop (R0);

//initializing disk map table for shell :not init
[DISK_MAP_TABLE +2*10 + 0] = -1;
[DISK_MAP_TABLE +2*10 + 1]=-1;
[DISK_MAP_TABLE +2*10 + 2] = -1;
[DISK_MAP_TABLE +2*10+ 3] = -1;
[DISK_MAP_TABLE +2*10+ 4] = 9;
[DISK_MAP_TABLE +2*10+ 5] = 10;
[DISK_MAP_TABLE +2*10 +6] = -1;
[DISK_MAP_TABLE +2*10 + 7] = -1;
[DISK_MAP_TABLE +2*10 + 8] = -1;
[DISK_MAP_TABLE +2*10 + 9] = -1;

//initialize semaphore table
count=0;
while(count<32) do
	[SEMAPHORE_TABLE+count*4]=-1;
	[SEMAPHORE_TABLE+count*4+1]=0;
	count=count+1;
endwhile;

//initializing file status table
count=0;
while(count<MAX_FILE_NUM) do 	//32 entries
	[FILE_STATUS_TABLE + 4*count] = -1;	//locking pid
	[FILE_STATUS_TABLE + 4*count + 1] = -1;	//file open count
	count = count+1;
endwhile;

[PROCESS_TABLE + 16*1 + 3] = 1;	//set userid of init as root 


//initialize buffer table
count=0;
while(count<4) do 
	[BUFFER_TABLE + 4*count + 0] = -1;	//block no
	[BUFFER_TABLE + 4*count + 1] = 0;	//dirty bit
	[BUFFER_TABLE + 4*count + 2] = -1;	//locking pid
	count = count + 1;
endwhile;

//initialize open file table
count=0;
while(count<32) do
	[OPEN_FILE_TABLE+4*count+0]=-1;//inode index
	[OPEN_FILE_TABLE+4*count+1]=0;//open instance count
	count=count+1;
endwhile;

multipop(R0);
return;
